<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Category Offer</title>
    <style>
      .table th, .table td {
    min-width: 150px; /* Adjust width as needed */
    word-break: break-word; /* Prevents text overflow */
    
}
    </style>
    <link rel="stylesheet" href="/styles/validationCommon.css">
    <link rel="stylesheet" href="/styles/emptyTable.css">
    <script src="https://unpkg.com/lucide@latest"></script>
    
  </head>
  <body style="overflow-x: hidden;">

    <div class="modal fade" id="editCategoryOfferModal" tabindex="-1" aria-labelledby="editCategoryOfferLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="editCategoryOfferLabel">Edit Category Offer</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <form id="editCategoryOfferForm">
                        <input type="text" id="editCategoryId" hidden>
                        <!-- Category Name (Disabled) -->
                        <div class="mb-3">
                            <label for="editCategoryName" class="form-label">Category Name</label>
                            <input type="text" class="form-control" id="editCategoryName" disabled>
                            <div class="invalid-feedback">Category Name is required.</div>
                        </div>
    
                        <!-- Offer Percentage -->
                        <div class="mb-3">
                            <label for="editOfferPercentage" class="form-label">Offer Percentage</label>
                            <input type="number" class="form-control" id="editOfferPercentage" min="0" max="100" placeholder="Enter offer percentage">
                            <div class="invalid-feedback">Please enter a valid offer percentage (0-100).</div>
                        </div>
    
                        <!-- Start Date -->
                        <div class="mb-3">
                            <label for="editStartDate" class="form-label">Start Date</label>
                            <input type="date" class="form-control" id="editStartDate">
                            <div class="invalid-feedback">Start Date is required.</div>
                        </div>
    
                        <!-- End Date -->
                        <div class="mb-3">
                            <label for="editEndDate" class="form-label">End Date</label>
                            <input type="date" class="form-control" id="editEndDate">
                            <div class="invalid-feedback">End Date is required and should be after the Start Date.</div>
                        </div>
    
                        <!-- Is Listed Dropdown -->
                        <div class="mb-3">
                            <label for="editIsListed" class="form-label">Is Listed</label>
                            <select class="form-select" id="editIsListed">
                                <option value="">Select</option>
                                <option value="list">List</option>
                                <option value="unlist">Unlist</option>
                            </select>
                            <div class="invalid-feedback">Please select a valid option.</div>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-primary" id="saveChangesBtn">Save Changes</button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal fade" id="offerModal" tabindex="-1" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Category Offer</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <form id="offerForm">
                        <div class="mb-3">
                            <label class="form-label">Category Name</label>
                            <select id="category" class="form-select">
                                <option value="">Choose Category</option>
                                <% category.forEach((category)=>{%>
                                    <option value="<%=category._id%>"><%=category.categoryName%></option>
                                    <%})%>
                            </select>
                            <div class="text-danger error-message" id="categoryError"></div>
                        </div>
    
                        <div class="mb-3">
                            <label class="form-label">Offer Percentage</label>
                            <input type="number" id="offer" class="form-control" min="1" max="100">
                            <div class="text-danger error-message" id="offerError"></div>
                        </div>
    
                        <div class="mb-3">
                            <label class="form-label">Start Date</label>
                            <input type="date" id="startDate" class="form-control">
                            <div class="text-danger error-message" id="startDateError"></div>
                        </div>
    
                        <div class="mb-3">
                            <label class="form-label">End Date</label>
                            <input type="date" id="endDate" class="form-control">
                            <div class="text-danger error-message" id="endDateError"></div>
                        </div>
    
                        <div class="mb-3">
                            <label class="form-label">isListed</label>
                            <select id="status" class="form-select">
                                <option value="">Select Status</option>
                                <option value="list">List</option>
                                <option value="unlist">Unlist</option>
                            </select>
                            <div class="text-danger error-message" id="statusError"></div>
                        </div>
    
                        <button type="submit" class="btn btn-success w-100">Submit</button>
                    </form>
                </div>
            </div>
        </div>
    </div>


    
    <%-include('./partials/header')%>
    <div class="row">
      <%-include('./partials/sidebar')%>
      <div class="content col-lg-10">
        <div class="content-head w-100 row mt-3">
        <div class="offer-title col-lg-6">
          <h2 class="">Category Offer</h2>
        </div>
        <div class="add-coupon-btn col-lg-6 text-end">
            <button class="btn btn-success" onclick="" data-bs-toggle="modal" data-bs-target="#offerModal" >
                Add Category Offer
            </button>
        </div>
      </div>
      <div class="content-body">
        <form class="d-flex mb-3 mt-3" method="GET" action="" >
          <input class="form-control me-2 w-25" type="text" name="search" 
              placeholder="Search Category Offer..." id="category-search">
          <button class="btn btn-dark" type="submit" onclick="">üîç</button>
      </form>

      <% if(offer?.length==0) { %>
        <div class="empty-state">
          <div class="empty-state-icon">
            <i data-lucide="tag"></i>
          </div>
          <h2>No Category Offer Found</h2>
      
     
        </div> 
        <%}%>
      <div class="table-responsive ">
        <table class="text-secondary table table-light table-bordered table-striped mt-3">
            <% if(offer?.length!=0) { %>
                <thead >
                    <tr>
                       
                        <th>S.No</th>
                        <th>Category Name</th>
                        <th>Offer Percentage</th>
                   
                        <th>Start Date</th>
                        <th>End Date</th>
                        <th>Current Status</th>
                        <th>Edit Offer</th>
                        <th>Delete Offer</th>
                    </tr>
                </thead>
                <%}%>
    
          <tbody id="table-body">
          <%offer?.forEach((offer,i)=>{%>
            <tr>
                <td><%=i+1%></td>
                <td><%=offer?.categoryName%></td>
                <td><%=offer?.offerPercentage%></td>
                <td><%=offer?.startDate%></td>
                <td><%=offer?.endDate%></td>
                
                <td><%if(offer?.currentStatus=="active"){%>
                    <button class="btn btn-success">Active</button>
                  <%}%>
                  <%if(offer?.currentStatus=="expired"){%>
                    <button class="btn btn-danger">Expired</button>
                  <%}%>
                  <%if(offer?.currentStatus=="upcoming"){%>
                    <button class="btn btn-warning text-white">Upcoming</button>
                  <%}%>
                  
              <td><button class="btn btn-success" data-bs-toggle="modal" data-bs-target="#editCategoryOfferModal" onclick="openUpdateCategoryOfferModal(
                '<%=offer?.category%>',
                '<%=offer?.categoryName%>',
                '<%=offer?.offerPercentage%>',
                '<%=offer?.startDate%>',
                '<%=offer?.endDate%>',
                '<%=offer?.isListed%>'
              )">Edit</button></td>
              <td>
                <button class="btn btn-danger" onclick="deleteCategoryOffer('<%=offer?.category%>')">Delete</button>
              </td>
          </tr>    
     
            <%})%>
 
       
       
          </tbody>
            
      </table>
      <ul class="pagination mb-5">
        <% if (page > 1) { %>
          <li class="page-item">
            <a class="page-link" href="?search=<%= searchQuery %>&page=<%= page - 1 %>">Previous</a>
          </li>
        <% } %>
    
        <% for (let i = 1; i <= totalPages; i++) { %>
          <li class="page-item <%= i === page ? 'active' : '' %>">
            <a class="page-link" href="?search=<%= searchQuery %>&page=<%= i %>"><%= i %></a>
          </li>
        <% } %>
    
        <% if (page < totalPages) { %>
          <li class="page-item">
            <a class="page-link" href="?search=<%= searchQuery %>&page=<%= page + 1 %>">Next</a>
          </li>
        <% } %>
      </ul>
      </div>

  
      </div>
      
    </div>
    </div>
  </body>
  <script src="https://code.jquery.com/jquery-3.7.1.min.js" integrity="sha256-/JqT3SQfawRcv/BIHPThkBvs0OEvtFFmqPF/lYI/Cxo=" crossorigin="anonymous"></script>
  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>


<script>
    document.addEventListener("DOMContentLoaded", function () {
    const form = document.getElementById("offerForm");

    // Function to show error
    function showError(input, message) {
        const errorElement = document.getElementById(input.id + "Error");
        errorElement.textContent = message;
        input.classList.add("is-invalid");
    }

    // Function to remove error
    function removeError(input) {
        const errorElement = document.getElementById(input.id + "Error");
        errorElement.textContent = "";
        input.classList.remove("is-invalid");
    }

    form.addEventListener("submit", function (event) {
        event.preventDefault(); // Prevent form submission if validation fails
        let isValid = true;

        // Get input elements
        const category = document.getElementById("category");
        const offer = document.getElementById("offer");
        const startDate = document.getElementById("startDate");
        const endDate = document.getElementById("endDate");
        const status = document.getElementById("status");

        // Validate Category
        if (category.value.trim() === "") {
            showError(category, "Category is required.");
            isValid = false;
        } else {
            removeError(category);
        }

        // Validate Offer Percentage (1-100)
        if (offer.value.trim() === "" || offer.value < 1 || offer.value > 100) {
            showError(offer, "Enter a valid offer percentage (1-100).");
            isValid = false;
        } else {
            removeError(offer);
        }

        // Validate Start Date
        if (startDate.value.trim() === "") {
            showError(startDate, "Start Date is required.");
            isValid = false;
        } else {
            removeError(startDate);
        }

        // Validate End Date
        if (endDate.value.trim() === "") {
            showError(endDate, "End Date is required.");
            isValid = false;
        } else if (new Date(endDate.value) <= new Date(startDate.value)) {
            showError(endDate, "End Date must be after Start Date.");
            isValid = false;
        } else {
            removeError(endDate);
        }

        // Validate Status
        if (status.value.trim() === "") {
            showError(status, "Please select a status.");
            isValid = false;
        } else {
            removeError(status);
        }

        // If form is valid, submit it
        if (isValid) {
            event.preventDefault()
            fetch("/admin/categoryOffer/addCategoryOffer", {
    method: "POST",
    headers: {
        "Content-Type": "application/json", // Ensures server reads JSON data
    },
    body: JSON.stringify({
        category: category.value,
        offerPercentage: offer.value,
        startDate: startDate.value,
        endDate: endDate.value,
        status: status.value
    })
})
.then(response => response.json()) // Ensure the response is converted to JSON first
.then(data => {
    if (data.message) {
        Swal.fire({
            icon: "success",
            title: "Success!",
            text: data.message,
            confirmButtonColor: "#3085d6",
        }).then(() => {
            location.reload(); // Refresh the page after success
        });
    } else if (data.error) {
        Swal.fire({
            icon: "warning",
            title: "Warning!",
            text: data.error,
            confirmButtonColor: "#f39c12",
        });
    } else {
        Swal.fire({
            icon: "error",
            title: "Error!",
            text: "Something went wrong. Please try again.",
            confirmButtonColor: "#d33",
        });
    }
})
.catch(error => {
    console.error("Error:", error);
    Swal.fire({
        icon: "error",
        title: "Error!",
        text: "Failed to add category offer. Check your connection.",
        confirmButtonColor: "#d33",
    });
});

        }
    });

    // Remove error on input change
    document.querySelectorAll("input, select").forEach(input => {
        input.addEventListener("input", () => {
            removeError(input);
        });
        input.addEventListener("change", () => {
            removeError(input);
        });
    });
});

</script>


 <script>

async function openUpdateCategoryOfferModal(categoryId, categoryName, offerPercentage, startDate, endDate, isListed) {
    const editCategoryName = document.getElementById('editCategoryName');
    const editOfferPercentage = document.getElementById('editOfferPercentage');
    const editStartDate = document.getElementById('editStartDate');
    const editEndDate = document.getElementById('editEndDate');
    const editIsListed = document.getElementById('editIsListed');
    const editCategoryId=document.getElementById('editCategoryId')

    editCategoryName.value = categoryName;
    editOfferPercentage.value = offerPercentage;
    editStartDate.value = formatDate(startDate);
    editEndDate.value = formatDate(endDate);
    editIsListed.value = isListed === "true" ? "list" : "unlist";
    editCategoryId.value=categoryId
}


function formatDate(dateString) {
    if (!dateString) return ""; 
    const parts = dateString.split("-");
    if (parts.length === 3) {
        return `${parts[2]}-${parts[1]}-${parts[0]}`; 
    }
    return ""; 
}

 </script>
  
  <script>
    document.getElementById('saveChangesBtn').addEventListener('click', function(event) {
        event.preventDefault(); // Prevent form submission
    
        let isValid = true; // Track if the form is valid
    
        // Validate Offer Percentage
        const offerPercentage = document.getElementById('editOfferPercentage');
        if (offerPercentage.value.trim() === "" || offerPercentage.value < 0 || offerPercentage.value > 100) {
            showError(offerPercentage, "Please enter a valid offer percentage (0-100).");
            isValid = false;
        } else {
            removeError(offerPercentage);
        }
    
        // Validate Start Date
        const startDate = document.getElementById('editStartDate');
        if (startDate.value.trim() === "") {
            showError(startDate, "Start Date is required.");
            isValid = false;
        } else {
            removeError(startDate);
        }
    
        // Validate End Date
        const endDate = document.getElementById('editEndDate');
        if (endDate.value.trim() === "" || endDate.value <= startDate.value) {
            showError(endDate, "End Date should be after the Start Date.");
            isValid = false;
        } else {
            removeError(endDate);
        }
    
        // Validate Is Listed Dropdown
        const isListed = document.getElementById('editIsListed');
        if (isListed.value.trim() === "") {
            showError(isListed, "Please select a valid option.");
            isValid = false;
        } else {
            removeError(isListed);
        }
    
        // If all fields are valid, submit the form
        if (isValid) {
            event.preventDefault()
            fetch("/admin/categoryOffer/updateCategoryOffer", {
    method: "put",
    headers: {
        "Content-Type": "application/json", // Ensures server reads JSON data
    },
    body: JSON.stringify({
        category: editCategoryId.value,
        offerPercentage: editOfferPercentage.value,
        startDate: editStartDate.value,
        endDate: editEndDate.value,
        isListed: editIsListed.value
    })
})
.then(response => response.json()) // Ensure the response is converted to JSON first
.then(data => {
    if (data.message) {
        Swal.fire({
            icon: "success",
            title: "Success!",
            text: data.message,
            confirmButtonColor: "#3085d6",
        }).then(() => {
            location.reload(); // Refresh the page after success
        });
    } else if (data.error) {
        Swal.fire({
            icon: "warning",
            title: "Warning!",
            text: data.error,
            confirmButtonColor: "#f39c12",
        });
    } else {
        Swal.fire({
            icon: "error",
            title: "Error!",
            text: "Something went wrong. Please try again.",
            confirmButtonColor: "#d33",
        });
    }
})
.catch(error => {
    console.error("Error:", error);
    Swal.fire({
        icon: "error",
        title: "Error!",
        text: "Failed to add category offer. Check your connection.",
        confirmButtonColor: "#d33",
    });
});

        }
    });
    
    // Function to show error message
    function showError(input, message) {
        input.classList.add("is-invalid");
        input.nextElementSibling.textContent = message;
    }
    
    // Function to remove error message
    function removeError(input) {
        input.classList.remove("is-invalid");
    }
    
    // Remove error when user types/selects a valid input
    document.querySelectorAll("#editCategoryOfferForm input, #editCategoryOfferForm select").forEach(input => {
        input.addEventListener("input", function() {
            removeError(input);
        });
    });
    </script>
    
    <script>
        async function deleteCategoryOffer(categoryId) {
         Swal.fire({
             title: "Are you sure?",
             text: "You won't be able to revert this!",
             icon: "warning",
             showCancelButton: true,
             confirmButtonColor: "#d33",
             cancelButtonColor: "#3085d6",
             confirmButtonText: "Yes, delete it!"
         }).then(async (result) => {
             if (result.isConfirmed) {
                 try {
                     const response = await fetch(`/admin/categoryOffers/delete/${categoryId}`, {
                         method: "DELETE",
                     });
     
                     const data = await response.json();
     
                     if (response.ok) {
                         Swal.fire("Deleted!", data.message, "success").then(() => {
                             location.reload(); // Refresh page after deletion
                         });
                     } else {
                         Swal.fire("Error!", data.message || "Something went wrong.", "error");
                     }
                 } catch (error) {
                     Swal.fire("Error!", "Failed to delete offer.", "error");
                     console.error("Delete Error:", error);
                 }
             }
         });
     }
     
     </script>
       <script>
        lucide.createIcons();
      </script>
    
</html>
